[
  {
    "name": "BRUEMI",
    "img": "1",
    "imgName": ["Main", "Login", "Signup", "Call", "Record & Delete"],
    "period": "23.05.08 ~ 23.05.26(3주)",
    "fe": ["JavaScript", "React", "Sass"],
    "be": ["Node.js", "ExpressJS", "WebSocket"],
    "role": "Full-Stack (1/6명)",
    "outline": "vSLAM기반 자율주행 서비스 로봇",
    "git": "https://github.com/zsecq94/ssafy-pjt/tree/main/pjt4",
    "explanation": "BRUEMI는 VSLAM을 기반으로 실내에서 물건을 전달해주는 수요응답형 자율주행 서비스 로봇입니다. ",
    "title": [
      "📜 짧은 개발기간",
      "📜 임베디드 시스템 과의 통신",
      "📜 setInterval VS requestAnimationFrame"
    ],
    "learned": [
      "프로젝트 기간이 짧았습니다. 단기간에 프로젝트를 완성하기 위해 가장 익숙한 프레임워크인 React와 Node.js를 사용하여 클라이언트와 서버를 구축했고, 타이트한 스케줄 관리를 위해 협업툴(JIRA)을 적극적으로 사용하며 제한된 3주 동안 목표로 한 개발을 성공적으로 마무리할 수 있었습니다. 시간 제약이 있는 상황에서의 효율적인 개발 방법과 스케줄 관리의 중요성을 깨달았습니다.",
      "서버와 임베디드(로봇)간의 웹소켓 통신을 설계하고 구현하는데 어려움이있었습니다. 서버와 클라이언트를 중심으로 웹소켓 통신을 설계하고 구현했는데 이에 맞춰서 임베디드와의 웹소켓 통신을 설계하려고 하니 데이터 전달방식에 제약사항이 생겨 문제가 발생했습니다. 임베디드쪽에 익숙하지 않다보니 데이터 전달방식을 생각하지 않고 구현해서 문제가 생긴것이였습니다. 이를 해결하기 위해 임베디드 개발자와 협업하여 데이터 전달방식을 통일하고, 임베디드 시스템과의 웹소켓 통신을 먼저 구현한 후에 클라이언트 통신을 구현함으로써 해결할 수 있었습니다.",
      "setInterval : 일정한 간격으로 함수를 호출하기 때문에, 브라우저가현재 실행 가능한 작업을 고려하지 않고 계속해서 함수를 호출하여버벅거리는 현상이 지속되며 CPU 및 배터리가 낭비될 수 있고,애니메이션 처리 시 일정한 간격으로 업데이트되므로, 화면이 부드럽게표시되지 않을 수 있습니다. requestAnimationFrame : 브라우저의 리프레시 주기에 맞추어 호출되기때문에, 브라우저가 최적의 타이밍에서 함수를 실행하도록 돕습니다.이로 인해 더 나은 성능 및 배터리 효율성을 제공할 수 있습니다.애니메이션 처리에 적합한 메소드로, 브라우저가 최적의 시기에애니메이션을 업데이트하므로 부드럽고 자연스러운 애니메이션 효과를얻을 수 있습니다. 일반적으로, 애니메이션 및 시간 기반 작업을 처리할 때는 requestAnimationFrame함수를 사용하는 것이 더 좋은 선택이라는 점을 알게됐고, 부드러운 애니메이션 및 효율적인 작업 처리를 위해 requestAnimationFrame함수를 사용하여 '부르미'를 구현했습니다."
    ],
    "result": [
      "🔑 Result",
      "시간 제약이 있는 상황에서 효율적인 개발 방법과 스케줄 관리의 중요성을 깨달았습니다. 또한, 임베디드 시스템과의 데이터 전달방식이나 제약사항에 대해 학습할 수 있었고, 무엇보다 디자인 적인 요소들에 대한 눈높이들이 한 층 높아지는 프로젝트였다고 생각합니다."
    ]
  },
  {
    "name": "T:LENS",
    "img": "2",
    "imgName": ["Flow", "Main", "Region", "Company", "Reporter"],
    "period": "23.02.20 ~ 23.04.07(7주)",
    "fe": ["JavaScript", "React", "Sass", "D3"],
    "be": ["Spring Boot", "MySQL"],
    "role": "Frontend (2/6명)",
    "outline": "뉴스 트랜드 분석 서비스",
    "git": "https://github.com/zsecq94/ssafy-pjt/tree/main/pjt3",
    "explanation": "T:LENS는 실시간 크롤링 및 분산 처리를 통해 다양한 뉴스 데이터를수집하고, 이를 종합하여 트렌드를 파악하고 시각화하는 뉴스 트렌드분석 서비스입니다.",
    "title": [
      "📜 시각화 라이브러리",
      "📜 대량의 데이터",
      "📜 반응형 그리드 시스템"
    ],
    "learned": [
      "추출된 데이터를 어떤 라이브러리를 사용하여 시각화해야되는지 많은고민을 했습니다. 프로젝트의 목적과 요구 사항에 맞게 적절한라이브러리를 선택하는 것이 가장 중요하다고 생각했고, 여러라이브러리를 비교하고 실험해보면서 프로젝트의 특성과 요구사항을 가장잘 반영하는 라이브러리를 선택하여 적용했습니다. 라이브러리마다지원하는 기능이 다르기때문에 디자인적 요소와 데이터 전달방식을체크하여 선정했습니다.",
      "프로젝트에서 대량의 데이터를 다루기 때문에 최초의 페이지 로딩시20개의 데이터를 불러오고 스크롤을 내릴 때마다 추가적으로 20개씩 로드하는 무한 스크롤 기능을 구현했습니다. 추가로 데이터가 로드되는 동안화면이 튀거나 사용자 입력이 먹통되지 않도록 스피너 라이브러리를사용하여 로딩 화면을 따로 구현했습니다.",
      "다양한 화면 크기와 디바이스에 대응하기 위해 반응형 그리드 시스템을적용하여 화면 크기가 변경될 때 컬럼의 너비나 행의 배치를 조정하여레이아웃을 최적화 하도록 구현했습니다."
    ],
    "result": [
      "🔑 Result",
      "추출된 데이터를 다양한 시각화 라이브러리인 d3, Amcharts, Wordcloud,Apexcharts 등을 활용하여 시각적으로 표현하는 데 중점을 두었습니다.이를 통해 사용자들에게 직관적이고 명확한 정보 제공을 목표로하였습니다. 또한, 이 프로젝트를 통해 스프링 부트로 구현된 서버와의소통 경험을 쌓을 수 있었습니다."
    ]
  },
  {
    "name": "My PC",
    "img": "3",
    "imgName": ["Main", "Board", "Diagnose", "Make up", "Profile"],
    "period": "23.01.03 ~ 23.02.17(7주)",
    "fe": ["JavaScript", "React", "Redux", "Sass"],
    "be": ["Node.js", "ExpressJS", "MySQL"],
    "role": "Full-Stack (2/5명)",
    "outline": "퍼스널 컬러 진단 플랫폼",
    "git": "https://github.com/zsecq94/ssafy-pjt/tree/main/pjt2",
    "explanation": "My PC는 사진 또는 키오스크를 통해 빠르고 간편하게 자신의 퍼스널컬러를 진단할 수 있고, 진단을 통해 사용자의 제품 선택을 보조해주는플랫폼입니다.",
    "title": ["📜 상태관리(Redux)", "📜 Multer", "📜 머신러닝 모델과 연계"],
    "learned": [
      "로그인 정보를 Redux로 관리하면, 애플리케이션 전역에서 로그인 상태를효과적으로 관리할 수 있다는 점을 알게되었습니다. 사용자가 로그인하면Redux 스토어에 로그인 상태를 저장하고, 다양한 컴포넌트에서 이 정보를공유할 수 있습니다. 이로써 상태 관리의 일관성을 유지하고 중복 코드를피할 수 있었습니다. Redux를 통해 애플리케이션의 상태를 한 곳에서 관리하면서 전역 상태의예측 가능성을 높일 수 있다는점과 Redux 미들웨어를 통해 비동기 작업을관리하면 코드가 보다 체계적이고 확장 가능하다는 것도 배울 수있었습니다.",
      "프로젝트에서 사용자가 이미지를 업로드하는 상황이 많았습니다.사용자가 퍼스널컬러 진단 및 화장하기와 같은 상황에서 자신의 이미지나샘플 이미지를 서버로 업로드하여 결과를 확인하는 과정이 필요했습니다.Node.js 환경에서 이러한 파일 업로드를 간편하게 다루기 위해 Multer를선택하고 구현했습니다.",
      "Python 파일의 머신러닝 모델과 Node.js 서버 간의 효율적인 통신과데이터 전달 방식을 이해하는 것이었습니다. 특히 사용자가클라이언트를 통해 이미지를 업로드하고 결과를 받아오는 과정에서데이터 형식 변환 및 머신러닝 모델에 데이터를 전달하는 것이어려움이었습니다. 이를 극복하기 위해 먼저 통신 메커니즘을 철저히 이해하고,클라이언트와 서버 간의 데이터 전달 방식을 통일화하여 일관성을유지했습니다. 이로써 데이터 호환성 문제를 극복하고 데이터를효율적으로 처리할 수 있었습니다."
    ],
    "result": [
      "🔑 Result",
      "Redux를 활용해 로그인 정보를 관리하는 것으로, 로그인 상태를애플리케이션 전반에서 간편하게 공유하고 관리할 수 있다는 것을 알게되었습니다.",
      "Multer를 사용하여 파일 업로드를 간단하게 다루면서, 사용자 이미지업로드와 같이 중요한 기능을 원활하게 구현하는 방법을 습득하였습니다.",
      "Python 머신러닝 모델과 Node.js 서버 간의 효율적인 데이터 통신과 전달방식을 배우고 실제로 구현하면서, 클라이언트의 이미지 업로드와머신러닝 결과 반환 과정을 원활하게 처리할 수 있는 능력을 기르는과정이 매우 유익하였습니다."
    ]
  },
  {
    "name": "YB MOVIE",
    "img": "4",
    "imgName": ["Main", "Detail", "Worldcup", "Comment", "Search & Bookmark"],
    "period": "22.12.15 ~ 22.12.23(1주)",
    "fe": ["JavaScript", "Vue.js", "Vuex", "Vuetify"],
    "be": ["Django"],
    "role": "Front-End (1/2명)",
    "outline": "영화 추천 서비스",
    "git": "https://github.com/zsecq94/ssafy-pjt/tree/main/pjt1",
    "explanation": "YB MOVIE는 데이터 기반 영화 추천 서비스 입니다. 사용자는 영화에 대한코멘트를 남길 수 있으며, 영화 이상형월드컵을 이용해 사용자가선호하는 장르를 파악하여 영화를 추천해주는 서비스입니다.",
    "title": ["📜 추천 알고리즘", "📜 Youtube API", "📜 Modal"],
    "learned": [
      "영화추천알고리즘은 영화 월드컵을 진행하여 결승전에 진출한 영화 2개를활용하여 Tmdb에서 추천 영화를 넘겨받는 Recommend API를 활용했습니다.",
      "YouTube API와 Axios 라이브러리를 처음 사용해 API 요청과 응답 처리를연결하는 방법이 어려웠습니다. 또한, 영화 제목과 트레일러 라는검색어를 조합하여 정확한 검색을 보내는 로직을 개발하고, API 요청상태에 따른 사용자 경험을 관리하는 비동기 처리와 UI 업데이트도고려해야 했습니다. API 키 관리와 보안 역시 중요한 고려사항이었는데,이러한 어려움을 극복하기 위해 문서와 커뮤니티의 지식을 활용하여점진적으로 기능을 완성시켰습니다.",
      "사용자들이 조금이라도 더 편리하게 사용하기위한 방법을 찾던 중 모달컴포넌트를 알게되었습니다. 사용자의 시선을 집중시키고 중요페이지를 유지하며 영화의 정보를 빠르게 파악할수있고, 일관된디자인을 제공할수 있기 때문에 모달을 적극으로 활용하여 사용자들이영화의 정보를 쉽고 빠르게 파악할 수 있도록 구현했습니다."
    ],
    "result": [
      "🔑 Result",
      "처음 수행한 프로젝트였지만, 초기에는 어떻게 시작해야 할지 막막함을느꼈습니다. 하지만 단계적으로 기능을 구현하며 자신감을 얻게되었습니다. 추천 알고리즘, API 처리와 보안, 비동기 처리, 모달컴포넌트 활용, 사용자 편의성 고려 등 다양한 과제를 공식 문서와커뮤니티 지식을 활용하여 해결해나감으로써 점차 프로젝트가 완성되는과정을 경험하게 되었습니다."
    ]
  },
  {
    "name": "Portfolio",
    "img": "5",
    "imgName": ["Main", "About", "Skills", "Projects", "Contact"],
    "period": "23.08.14 ~ 23.08.25(2주)",
    "fe": ["JavaScript", "React", "Sass"],
    "be": ["Firebase"],
    "role": "Frontend",
    "outline": "개인 포트폴리오 제작",
    "git": "https://github.com/zsecq94/portfolio",
    "explanation": "취업을 목적으로 한 개인 포트폴리오 제작 사이트입니다. 가장 자신 있는Javascript와 React를 이용해 제작했으며 Firebase의 Hosting을 이용해 배포했습니다.",
    "title": ["📜 Design", "📜 Deploy"],
    "learned": [
      "혼자서 프로젝트를 진행하다 보니 디자인적 요소를 선택할 때 다른사람의평가와 피드백을 받을 수 없어서, 포트폴리오를 검토하는 사람의시각에서 최대한 깔끔하고 쉽게 내용을 이해할 수 있도록 레이아웃을구성했습니다. 각 컴포넌트의 레이아웃을 구성할 때는 온라인커뮤니티에서 얻은 아이디어를 활용하여 나만의 최적화된 디자인을구현할 수 있었습니다. 초기 디자인 아이디어가 실제로 구현되면서 예상치 못한 문제나 개선사항이 생겼습니다. 이러한 문제점이 생길때마다 여러가지 방식으로실험하고 수정하며 완성도 높은 레이아웃을 구현할 수 있었습니다.",
      "처음에는 FE와 BE 모두 구성하여 AWS서버를 구매해 배포할 생각을가지고 있었지만, 프로젝트의 볼륨이 생각보다 크지 않고, 빠르고손쉽게 배포할 수 있는 방법을 알게되어 프로젝트의 볼륨에 맞춰Firebase의 호스팅 서비스를 사용하여 정적 웹사이트를 배포했습니다."
    ],
    "result": [
      "🔑 Result",
      "디자인에 대해 많은 공부를 할 수 있었습니다. 혼자서 진행하다 보니자유롭게 원하는 대로 구현할 수 있는 장점도 있었지만, 디자인 요소를추가할 때마다 상당한 시간이 소요되었습니다. 구글링을 통해 다양한아이디어와 기술을 습득하며, 디자인에 대한 시야도 확장할 수 있었다고생각합니다."
    ]
  }
]
