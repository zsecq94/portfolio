[
  {
    "name": "BRUEMI",
    "img": 1,
    "summary": "VSLAM기반 자율주행 서비스 로봇은 실내에서 물건을 전달해주는 수요응답형 서비스 로봇입니다. 로봇은 실내 지도작성, 위치추정, 장애물 회피 기능을 수행합니다. 천장을 보는 카메라를 이용하여 VSLAM을 사용하기에 빠르게 지도작성을 수행하고 초기세팅시간이 짧은 장점이 있습니다.",
    "background": [
      "저는 기술이 사회에 긍정적인 영향을 미칠 수 있다는 확신을 가지고 있습니다. 현재 사회에서는 고령화, 인력 부족, 비대면 서비스의 필요성 등 다양한 이슈가 존재합니다. 이러한 문제들을 해결하기 위해선 새로운 접근 방식이 필요하다고 생각했습니다. 그 중 하나로 로봇 기술이 주목받고 있었습니다. 하지만 대부분의 로봇은 가격이 비싸거나 복잡한 기능 때문에 일반 소비자들이 접하기 어려운 상황이었습니다. 보급형 서비스 로봇 프로젝트를 통해 일반 사용자도 쉽게 사용할 수 있는 서비스를 제공하고자 했습니다. ",
      "프론트엔드 개발자로서 사용자 경험과 인터랙션에 집중하는 것을 중요하게 생각합니다. 이번 프로젝트에서 호출, 배송, 취소, 대기열 등록 등의 다양한 기능을 웹 환경에서 구현함으로써 사용자와 로봇 간의 원활한 상호작용을 가능하게 하는 역할을 수행할 수 있었습니다. 위와 같은 계기로 이 프로젝트를 시작하였으며, 실제 개발 과정에서도 사용자 중심적인 디자인과 효율적인 코드 작성에 초점을 맞추어 진행했습니다."
    ],
    "fe": "Front-End : JavaScript, React, Canvas, Swiper, ws module, audio-player, Sass, styled-components, MUI",
    "be": "Back-End : Node.js, Express, MySQL, ws module, fs module",
    "role": [
      "Full-Stack : 1명",
      "영상처리 : 1명",
      "임베디드 : 2명",
      "자율주행 : 2명"
    ],
    "function": [
      "호출",
      "취소 & 녹음",
      "로그인",
      "회원가입",
      "클라이언트 ws module 주요기능",
      "서버 ws module 주요기능"
    ],
    "function2": [
      "서빙 로봇을 호출하고 호출 순서를 확인할 수 있는 컴포넌트입니다. 보내는곳, 받는곳, 음성파일을 설정하여 서빙 로봇을 호출할 수 있고, 한 사람당 한 번의 호출만 가능하도록 구현했습니다. 호출 리스트는 최대 10개 이고, 클라이언트의 리스트와 임베디드 시스템의 리스트가 동일해야 하므로 서버에서 관리하며 리스트에 변화가 있을때마다 ws module을 이용해 양방향으로 통신하며 리스트를 최신화 시키도록 구현했습니다.//// MUI의 MenuItem컴포넌트를 활용하여 위치를 선택하고, FormControl컴포넌트를를 활용하여 선택한 위치에 대한 유효성을 검증했습니다. 또한, 호출 리스트를 효율적으로 보여주기 위해 Table컴포넌트를 활용했고, 자신이 호출한 내용의 배경색을 노란색으로 바꿔 한눈에 파악할 수 있도록 구현했습니다. 부르기 버튼을 클릭하면 몇 번째 순서인지 바로 알 수 있도록 focus를 이동합니다. CSS프레임워크 MUI를 사용하여 빠르고 효율적으로 구현했습니다.",
      "무르기 버튼을 클릭하면 자신이 호출했던 리스트를 제거합니다. 버튼 클릭 시 서버에 사용자의 아이디를 넘겨주고 서버에 구성되어있는 List에서 제거합니다.////호출할 때 단순히 물건만 전달해 주는 것이 아니라 음성도 같이 전달해 줄 수 있도록 구현했습니다. 녹음 버튼을 클릭하면 RecordModal이 나오도록 설계했고, 음성녹음은 사용자에게 권한을 요청하고 수락했을 시 사용하고 있는 디바이스의 녹음 기능을 통해 음성을 최대 30초 까지 녹음합니다. 음성 파일은 JavaScript의 Audio API를 사용했고, 서버에서 fs module의 writeFile 기능을 이용하여 저장하며 저장된 파일의 URL만 서빙 로봇으로 넘겨주어 음성 데이터를 출력했습니다. 클라이언트에서도 음성 파일의 URL을 사용하여 사용자가 언제든지 자기가 했던 녹음을 확인할 수 있고, 무르기버튼이나 음성제거 버튼을 클릭하면 음성 파일을 제거할 수 있도록 구현했습니다.",
      "form을 사용하여 로그인 데이터를 관리하고 비교 연산자를 통해 사용자가 유효성 검사에 통과되었을때만 로그인 버튼이 활성화 되도록 구현했습니다. 로그인 버튼을 클릭하면, 해당 form 데이터가 서버로 전송됩니다. 서버에서는 MySQL 데이터베이스를 참조하여 사용자의 정보를 확인합니다. 이 과정을 통해 사용자 인증이 성공적으로 이루어지며, 따라서 로그인 과정이 완료됩니다.",
      "회원가입 역시 form을 사용하여 데이터를 관리했고, 사용자가 실시간으로 유효성을 확인하며 회원가입을 진행할 수 있도록 구현했습니다. 모든 유효성 검사에 통과되면 회원가입 버튼이 활성화 되고, 회원가입 버튼 클릭 시 MySQL 데이터베이스를 참조하여 사용자의 정보를 확인합니다. 회원가입에 성공하면 자동으로 로그인이 되고, 실패시 toastify를 활용하여 안내 메세지를 보여줍니다.",
      "",
      ""
    ],
    "review": ["1", "2", "3"],
    "setting": ""
  },
  {
    "name": "T:LENS",
    "img": 2,
    "summary": "T:LENS는 키워드를 통해 실시간 트렌드를 쉽게 파악하고 싶은 사람과 기자별 맞춤형 구독 서비스가 필용한 사용자를 위한 실시간 크롤링 및 분산 처리를 통해 뉴스 트렌드를 종합하고 시각화하는 서비스입니다.",
    "background": [
      "뉴스는 현대 사회에서 매우 중요한 정보원으로 작용합니다. 사람들은 뉴스를 통해 최신 동향, 이슈, 경제 상황 등 다양한 정보를 얻고 소통하며 의사 결정을 내립니다. 하지만 너무 많은 뉴스가 생산되고 있어서 사용자들이 관심 있는 주제를 식별하고 핵심적인 내용을 파악하기 어려워지는 문제가 있습니다. 그래서 저희는 뉴스 트렌드 분석 서비스 프로젝트를 통해 이 문제를 해결하고자 했습니다. 사용자들이 최신 뉴스의 핵심적인 내용과 트렌드를 쉽게 파악할 수 있는 도구를 개발하여 제공함으로써, 사용자들의 시간과 노력을 절약하고 정확한 정보에 접근할 수 있도록 하고자 했습니다.",
      "데이터 시각화에 큰 관심을 가지고 있습니다. 프론트엔드 개발자로서 사용자 경험(UX)을 개선하기 위해 직관적이고 시각적으로 매력적인 인터페이스를 구현하는 것이 중요하다고 생각합니다. 따라서 이 프로젝트에서도 다양한 데이터 시각화 기법을 활용하여 사용자들이 쉽게 서비스를 이용할 수 있는 환경을 제공하고 싶었습니다."
    ],
    "fe": "Front-End : JavaScript, React, Redux, Swiper, Toastify, Slick-carousel, Sass, Amcharts, D3, React-Worldcloud, ApexCharts, Recharts",
    "be": "Back-End : Spring boot, MySQL, JWT",
    "role": [
      "Front-End : 2명",
      "Back-End : 2명",
      "Crawling : 1명",
      "데이터 정제 : 1명"
    ],
    "function": [
      "메인화면",
      "지역별 기사 확인하기",
      "기업별 주가정보 및 기사 확인하기",
      "기자별 작성 기사 확인하기"
    ],
    "function2": [
      "사용자가 가장 처음 보는 화면이기때문에 최대한 많은 정보를 얻을 수 있으면서 디자인적으로 거부감이 없도록 고민하며 구현했습니다. MUI의 Tabs컴포넌트를 사용하여 키워드 마다 제공되는 정보가 다르게 구성했고, 키워드 별 뉴스 기사와 다양한 시각화 데이터를 확인할 수 있습니다.//// 복잡한 데이터를 사용자들이 직관적으로 이해할 수 있도록 시각화 라이브러리를 적극적으로 사용했습니다. 총 10개 이상의 시각화 라이브러리를 하나하나 비교 테스트해 보며 프로젝트에 가장 알맞은 라이브러리 4개(D3, Amcharts, Apexcharts, Worldcloud)를 선정했고, 메인화면에 Amcharts, Apexcharts, Worldcloud를 활용하여 데이터를 시각화 했습니다. //// 뉴스 카드는 사용자에게 깔끔한 뉴스 요약을 제공하고, 한 번에 너무 많은 정보가 표시되는 것을 방지하기위해 CSS의 text-overflow와 -webkit-line-clamp 속성을 활용하여 내용이 2줄을 초과하지 않도록 구현하였습니다. 또한, 대량의 뉴스 데이터를 한 번에 로딩하는 것은 시스템에 과부하를 줄 수 있기 때문에, '무한 스크롤' 기술을 도입하여 이 문제를 해결했습니다. 사용자가 스크롤을 바닥까지 내리면 추가로 20개의 뉴스 데이터를 로딩하는 방식으로, 효율적이면서도 부드러운 UI를 구현했습니다.",
      "사용자가 지역별 뉴스의 정보를 효율적으로 확인하기 위해 대한민국 지도를 SVG를 이용해서 시각적으로 표현하고, 사용자에게 지역을 선택할 수 있는 인터페이스를 제공했습니다. 각 지역은 고유한 ID를 가지고 있으며, 마우스 클릭 이벤트에 따라 선택된 지역의 정보를 쉽게 확인할 수 있습니다.//// 이 컴포넌트에서도 '무한 스크롤' 기능을 적용했고, 사용자가 더 많은 정보를 자연스럽게 얻을 수 있도록 구현했습니다.",
      "기업별 간단한 정보를 확인하고 원하는 기업을 클릭하여 디테일 페이지로 이동할 수 있는 기능을 구현했습니다. MUI의 Card 컴포넌트를 사용하여 재사용 가능한 컴포넌트를 만들고, map 함수를 활용하여 Card를 반복적으로 표현함으로써 일관성 있는 레이아웃을 구성했습니다. 사용자들이 다양한 기업들의 정보를 쉽게 탐색하고 선택할 수 있도록 구현했습니다.//// 디테일 페이지에서는 선택한 기업의 상세 정보와 주가 정보, 뉴스 기사, 년도별 뉴스 기사 건수, 키워드 등을 확인할 수 있습니다. 기업의 주가 그래프는 주식 API와 Amcharts를 접목시켜 최근 3개월과 1년간의 주가 변동 추이를 시각화하여, 해당 기업의 주가 동향을 한눈에 파악할 수 있습니다. 또한, 키워드와 년도 별 기사 건수는 Wordcloud와 ApexCharts를 활용하여 시각화했습니다. Wordcloud로 표현된 키워드들은 클릭 가능하며, 클릭 시 검색 페이지로 넘어가도록 구현되어 추가적인 탐색과 검색이 가능합니다. 마찬가지로 ApexCharts로 표시된 년도 별 기사 건수는 그래프 형태로 제공되어 해당 기업의 언론 활동 추이 파악에 도움을 줍니다.",
      "24개의 언론사 별 기자들의 데이터를 크롤링하여 수집하고, 언론사를 기준으로 기자를 나누어 Carousel 방식으로 표현했습니다. Carousel 방식을 선택한 이유는 사용자가 다양한 언론사의 기자들을 쉽게 탐색하고 선택할 수 있도록 하기 위해서입니다. Carousel 방식은 여러 개의 항목을 좌우로 슬라이드하여 보여주는 UI 패턴으로, 한 화면에서 많은 정보를 제공할 수 있어 사용자 경험을 향상시킬 수 있을것이라 판단했습니다.//// 디테일 페이지에서는 사용자가 기자를 구독할 수 있는 기능을 제공합니다. 사용자는 원하는 기자를 구독하여 내 구독 리스트에 추가할 수 있으며, 마이페이지에서 간단하게 클릭하여 해당 기자의 디테일 페이지로 이동할 수 있습니다. 구독 기능을 통해 사용자들은 관심 있는 기자들과 연결되어 빠르고 편리하게 해당 기사나 정보에 접근할 수 있을것입니다. 또한, 각 기자의 취재 분야와 작성한 기사를 시각화 라이브러리를 활용하여 한눈에 확인할 수 있습니다. 시각화된 데이터를 통해 해당 기자가 어떤 분야에 전문성을 가지고 있는지 파악할 수 있으며, 그에 따라 관심 있는 주제나 분야의 기사를 찾아볼 수 있습니다.//// 구독 현황은 나이별과 성별별로 나눠서 확인할 수 있도록 제공됩니다. 사용자는 자신과 유사한 나이대나 성별의 사람들이 주로 어떤 종류의 기사나 정보를 선호하는지 알아볼 수 있습니다. 이러한 데이터 분석 결과는 서비스 개선 및 맞춤형 추천 등 다양한 영역에서 활용될 수 있습니다."
    ],
    "review": ["1", "2", "3"],
    "setting": ""
  },
  {
    "name": "My PC",
    "img": 3,
    "summary": "My PC는 사진 또는 키오스크를 통해 빠르고 간편하게 자신의 퍼스널 컬러를 진단할 수 있고, 진단을 통해 사용자의 제품 선택을 보조해주는 플랫폼입니다. ",
    "background": [
      "옷이나 화장품과 같은 제품을 선택할 때 자신의 퍼스널 컬러를 고려하는 것은 매우 중요합니다. 각각의 사람은 얼굴, 피부, 머리카락 등의 색상과 조합에 따라 어울리는 컬러가 다릅니다. 그러나 많은 사람들이 자신의 퍼스널 컬러를 정확하게 알지 못하거나 판단하기 어렵다는 문제가 있습니다. 따라서 저희는 사용자들이 빠르고 간편하게 자신의 퍼스널 컬러를 진단할 수 있는 방법을 제공하는 플랫폼을 개발하기로 결정했습니다. 이를 통해 사용자들은 사진 또는 키오스크를 활용하여 자신의 퍼스널 컬러를 진단할 수 있으며, 해당 결과에 기반하여 옷이나 화장품 등 다양한 제품을 선택하는 데 도움을 받을 수 있습니다.",
      "사용자 경험(UX) 개선과 시각적인 요소에 대한 관심도 가지고 있습니다. 프론트엔드 개발자로서 인터랙션과 디자인 요소에 신경쓰는 것이 중요하다고 생각합니다. 이 프로젝트에서도 사용자들이 직관적으로 서비스를 이용할 수 있는 인터페이스와 시각화 기능을 구현하기 위해 노력하였습니다."
    ],
    "fe": "Front-End : JavaScript, React, Redux, Sass, MUI, styled-components, file-loader, formik ,Yup",
    "be": "Back-End : Node.js, Express, MySQL, python-shell, multer, moment",
    "role": ["Full-Stack : 2명", "머신러닝: 1명", "임베디드 : 2명"],
    "function": [
      "게시판",
      "퍼스널 컬러 진단하기",
      "퍼스널 컬러 진단하기 Server(Node.js)",
      "화장해보기",
      "내 프로필"
    ],
    "function2": [
      "게시판은 재사용 가능한 Card 컴포넌트를 만들어 일관성 있게 구현했습니다. 이를 통해 사용자는 게시글을 보기 쉽고 직관적으로 확인할 수 있습니다. Card 컴포넌트는 반복적으로 사용되며, 게시글의 이미지와 제목을 표시하여 일관된 레이아웃을 유지했습니다.//// 오른쪽 하단에 위치한 SeasonSelector 버튼을 활용하여 계절별 게시판을 선택할 수 있고, 원하는 계절에 해당하는 게시글을 쉽게 찾아볼 수 있습니다. 각 계절별로 어울리는 색상과 그렇지 않은 색상이 각각 10개씩 준비되어 있으며, 4개의 게시판마다 서로 다른 색상을 제공하여 시각적인 다양성을 더했습니다. ",
      "사용자는 자신의 이미지를 통해 퍼스널 컬러를 진단할 수 있습니다. 이미지가 등록되었을때만 진단하기 버튼이 활성화되도록 구현하여 사용자가 서버에 무의미한 요청을 보내는 것을 방지하여 서버 리소스를 효율적으로 관리할 수 있도록 하였습니다. 또한, 진단하기 버튼을 클릭했을 때 로딩 이미지를 넣어 사용자가 진단 도중 다른 페이지로 넘어가지 않도록 구성했습니다.",
      "클라이언트에서 사용자가 선택한 이미지를 formData에 담아서 서버로 전송하고, 서버에서 머신러닝 모델인 파이썬 파일로 이미지 파일을 보냅니다. 이미지 전처리, 크기 조절, 색상 표준화 등의 작업을 통해 결과를 반환하고 결과를 다시 클라이언트에 보내며 사용자는 자신의 퍼스널 컬러를 확인할 수 있습니다.",
      "두 단계의 이미지 등록을 통해 화장 시뮬레이션 기능을 제공합니다. 첫 번째 단계에서는 사용자가 화장 전의 사진을, 두 번째 단계에서는 화장된 이미지를 등록합니다. 이 때, 두 번째 이미지에 대해서는 24개의 준비된 이미지 중 선택할 수 있어 사용자가 별도로 이미지를 준비할 필요가 없습니다.//// 화장 시뮬레이션이 완료되면 결과에 대한 만족도 조사를 진행하고, 만족하는 경우에는 결과 이미지와 유사한 다른 5개의 이미지를 추천해줍니다. 반대로 만족하지 않은 경우에는 결과와 상반된 특징을 가진 다른 5개의 이미지를 추천해줍니다. 이러한 기능은 사용자 경험을 향상시키고 사용자가 서비스에 만족할 수 있도록 추가했습니다. 또한, 이 페이지도 퍼스널 컬러 진단하기와 마찬가지로 로딩 이미지를 넣어 화장 도중 다른 페이지로 넘어가지 않도록 구성했고, 비슷한 이미지 전달 과정을 통해 결과를 확인할 수 있습니다.",
      "내 프로필은 사용자가 간단하게 자신의 스토리를 업로드할 수 있도록 구성했습니다. 자신의 프로필 이미지와 퍼스널 컬러가 공유되고, 간단한 자기소개 글을 작성할 수 있습니다. 또한, 자신이 작성한 글을 한눈에 모아볼 수 있습니다."
    ],
    "review": [
      "이 프로젝트를 통해 React 학습을 시작했고, React를 활용한 첫 프로젝트입니다. 초기에는 낮설었지만 반복 학습을 통해 React의 기본적인 구조와 동작 원리에 대해 이해하게 되었습니다.",
      "2",
      "3"
    ],
    "setting": ""
  },
  {
    "name": "YB MOVIE",
    "img": 4,
    "summary": "YB MOVIE는 데이터 기반 영화 추천 서비스 입니다. 사용자는 영화에 대한코멘트를 남길 수 있으며, 영화 이상형월드컵을 이용해 사용자가선호하는 장르를 파악하여 영화를 추천해주는 서비스입니다.",
    "background": [
      "영화는 많은 사람들에게 큰 관심과 즐거움을 주는 예술 형태입니다. 그러나 너무 많은 영화가 있어서 사용자들이 어떤 영화를 선택해야 할지 결정하기 어렵다는 문제가 있습니다. 이러한 문제를 해결하고자 저희 팀은 데이터 기반의 영화 추천 서비스를 개발하기로 결정했습니다.",
      "사용자들의 선호도와 취향을 파악하여 최적의 영화를 추천하는 것은 사용자 경험(UX) 개선에 큰 도움이 됩니다. 저희 팀은 이러한 선호도 파악을 위해 영화에 대한 코멘트 시스템과 장르별 이상형 월드컵을 도입하여 사용자들이 좋아하는 장르와 관련된 영화를 추천하는 기능을 개발하였습니다. 이를 통해 사용자들이 보다 만족할 수 있는 영화 추천 서비스를 제공하고자 했습니다.",
      "데이터 분석 및 기계 학습 분야에 대한 관심도 가지고 있습니다. 해당 프로젝트에서는 다양한 데이터 소스와 알고리즘을 활용하여 사용자들의 선호도와 취향을 파악하고, 그에 맞춰 최적의 영화 추천 결과를 도출하는 작업이 필요합니다. 따라서 저는 데이터 분석 및 기계 학습 기술 습득과 응용의 경험이 필요한 프로젝트로 참여하게 되었습니다. 위와 같은 계기로 인해 저는 YB MOVIE라는 데이터 기반 영화 추천 서비스 프로젝트에 참여하여 사용자들이 더 나은 영화 경험과 만족감을 얻을 수 있는 웹 애플리케이션을 개발하는 것에 열정과 동기부여를 갖게 되었습니다."
    ],
    "fe": "Front-End : JavaScript, Vue.js, Vuex, Vuetify, Bootstrap",
    "be": "Back-End : Django",
    "role": ["Front-End : 1명", "Back-End : 1명"],
    "function": [
      "영화 상세정보",
      "영화 월드컵",
      "월드컵 결과 기반 영화 추천",
      "평가 및 추천",
      "검색 및 북마크"
    ],
    "function2": ["", "", "", "", ""],
    "review": ["1", "2", "3"],
    "setting": ""
  },
  {
    "name": "Portfolio",
    "img": 5,
    "summary": "취업을 목적으로 한 개인 포트폴리오 제작 사이트입니다. JavaScript와 React를 이용해 제작했으며 Swiper 라이브러리를 사용하여 Front단을 구성했고, Firebase의 Hosting을 이용해 배포했습니다.",
    "background": [
      "초기에는 React를 활용하여 포트폴리오를 만드는 데에 의미를 두고 큰 열정 없이 포트폴리오를 제작했습니다. 2주 집중해서 간단하게 제작하고 나니 맘에 안드는 곳 투성이였습니다."
    ],
    "fe": "Front-End : JavaScript, React, Toastify, Swiper, Sass, styled-components",
    "de": "Deploy : Firebase",
    "role": ["Front-End & Deploy : 1명"],
    "function": ["About", "Skills", "Projects", "contact"],
    "function2": ["", "", "", ""],
    "review": ["1", "2", "3"],
    "setting": ""
  }
]
