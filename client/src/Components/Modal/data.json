[
  {
    "name": "BRUEMI",
    "img": 1,
    "summary": "VSLAM기반 자율주행 서비스 로봇은 실내에서 물건을 전달해주는 수요응답형 서비스 로봇입니다. 로봇은 실내 지도작성, 위치추정, 장애물 회피 기능을 수행합니다. 천장을 보는 카메라를 이용하여 VSLAM을 사용하기에 빠르게 지도작성을 수행하고 초기세팅시간이 짧은 장점이 있습니다.",
    "background": [
      "저는 기술이 사회에 긍정적인 영향을 미칠 수 있다는 확신을 가지고 있습니다. 현재 사회에서는 고령화, 인력 부족, 비대면 서비스의 필요성 등 다양한 이슈가 존재합니다. 이러한 문제들을 해결하기 위해선 새로운 접근 방식이 필요하다고 생각했습니다. 그 중 하나로 로봇 기술이 주목받고 있었습니다. 하지만 대부분의 로봇은 가격이 비싸거나 복잡한 기능 때문에 일반 소비자들이 접하기 어려운 상황이었습니다. 보급형 서비스 로봇 프로젝트를 통해 일반 사용자도 쉽게 사용할 수 있는 서비스를 제공하고자 했습니다. ",
      "프론트엔드 개발자로서 사용자 경험과 인터랙션에 집중하는 것을 중요하게 생각합니다. 이번 프로젝트에서 호출, 배송, 취소, 대기열 등록 등의 다양한 기능을 웹 환경에서 구현함으로써 사용자와 로봇 간의 원활한 상호작용을 가능하게 하는 역할을 수행할 수 있었습니다. 위와 같은 계기로 이 프로젝트를 시작하였으며, 실제 개발 과정에서도 사용자 중심적인 디자인과 효율적인 코드 작성에 초점을 맞추어 진행했습니다."
    ],
    "fe": "Front-End : JavaScript, React, Canvas, Swiper, ws module, audio-player, Sass, styled-components, MUI",
    "be": "Back-End : Node.js, Express, MySQL, ws module, fs module",
    "role": [
      "Full-Stack : 1명",
      "영상처리 : 1명",
      "임베디드 : 2명",
      "자율주행 : 2명"
    ],
    "function": [
      "호출",
      "취소 & 녹음",
      "로그인",
      "회원가입",
      "클라이언트 ws module 주요기능",
      "서버 ws module 주요기능"
    ],
    "function2": [
      "서빙 로봇을 호출하고 호출 순서를 확인할 수 있는 컴포넌트입니다. 보내는곳, 받는곳, 음성파일을 설정하여 서빙 로봇을 호출할 수 있고, 한 사람당 한 번의 호출만 가능하도록 구현했습니다. 호출 리스트는 최대 10개 이고, 클라이언트의 리스트와 임베디드 시스템의 리스트가 동일해야 하므로 서버에서 관리하며 리스트에 변화가 있을때마다 ws module을 이용해 양방향으로 통신하며 리스트를 최신화 시키도록 구현했습니다.//// MUI의 MenuItem컴포넌트를 활용하여 위치를 선택하고, FormControl컴포넌트를를 활용하여 선택한 위치에 대한 유효성을 검증했습니다. 또한, 호출 리스트를 효율적으로 보여주기 위해 Table컴포넌트를 활용했고, 자신이 호출한 내용의 배경색을 노란색으로 바꿔 한눈에 파악할 수 있도록 구현했습니다. 부르기 버튼을 클릭하면 몇 번째 순서인지 바로 알 수 있도록 focus를 이동합니다. CSS프레임워크 MUI를 사용하여 빠르고 효율적으로 구현했습니다.",
      "무르기 버튼을 클릭하면 자신이 호출했던 리스트를 제거합니다. 버튼 클릭 시 서버에 사용자의 아이디를 넘겨주고 서버에 구성되어있는 List에서 제거합니다.////호출할 때 단순히 물건만 전달해 주는 것이 아니라 음성도 같이 전달해 줄 수 있도록 구현했습니다. 녹음 버튼을 클릭하면 RecordModal이 나오도록 설계했고, 음성녹음은 사용자에게 권한을 요청하고 수락했을 시 사용하고 있는 디바이스의 녹음 기능을 통해 음성을 최대 30초 까지 녹음합니다. 음성 파일은 JavaScript의 Audio API를 사용했고, 서버에서 fs module의 writeFile 기능을 이용하여 저장하며 저장된 파일의 URL만 서빙 로봇으로 넘겨주어 음성 데이터를 출력했습니다. 클라이언트에서도 음성 파일의 URL을 사용하여 사용자가 언제든지 자기가 했던 녹음을 확인할 수 있고, 무르기버튼이나 음성제거 버튼을 클릭하면 음성 파일을 제거할 수 있도록 구현했습니다.",
      "form을 사용하여 로그인 데이터를 관리하고 비교 연산자를 통해 사용자가 유효성 검사에 통과되었을때만 로그인 버튼이 활성화 되도록 구현했습니다. 로그인 버튼을 클릭하면, 해당 form 데이터가 서버로 전송됩니다. 서버에서는 MySQL 데이터베이스를 참조하여 사용자의 정보를 확인합니다. 이 과정을 통해 사용자 인증이 성공적으로 이루어지며, 따라서 로그인 과정이 완료됩니다.",
      "회원가입 역시 form을 사용하여 데이터를 관리했고, 사용자가 실시간으로 유효성을 확인하며 회원가입을 진행할 수 있도록 구현했습니다. 모든 유효성 검사에 통과되면 회원가입 버튼이 활성화 되고, 회원가입 버튼 클릭 시 MySQL 데이터베이스를 참조하여 사용자의 정보를 확인합니다. 회원가입에 성공하면 자동으로 로그인이 되고, 실패시 toastify를 활용하여 안내 메세지를 보여줍니다.",
      "",
      ""
    ],
    "title": [
      "# 짧은 개발기간",
      "# 임베디드 시스템 과의 통신",
      "# setInterval VS requestAnimationFrame"
    ],
    "learned": [
      "프로젝트 기간이 짧았습니다. 단기간에 프로젝트를 완성하기 위해 가장 익숙한 프레임워크인 React와 Node.js를 사용하여 클라이언트와 서버를 구축했고, 타이트한 스케줄 관리를 위해 협업툴(JIRA)을 적극적으로 사용하며 제한된 3주 동안 목표로 한 개발을 성공적으로 마무리할 수 있었습니다. 시간 제약이 있는 상황에서의 효율적인 개발 방법과 스케줄 관리의 중요성을 깨달았습니다.",
      "서버와 임베디드(로봇)간의 웹소켓 통신을 설계하고 구현하는데 어려움이있었습니다. 서버와 클라이언트를 중심으로 웹소켓 통신을 설계하고 구현했는데 이에 맞춰서 임베디드와의 웹소켓 통신을 설계하려고 하니 데이터 전달방식에 제약사항이 생겨 문제가 발생했습니다. 임베디드쪽에 익숙하지 않다보니 데이터 전달방식을 생각하지 않고 구현해서 문제가 생긴것이였습니다. 이를 해결하기 위해 임베디드 개발자와 협업하여 데이터 전달방식을 통일하고, 임베디드 시스템과의 웹소켓 통신을 먼저 구현한 후에 클라이언트 통신을 구현함으로써 해결할 수 있었습니다.",
      "setInterval : 일정한 간격으로 함수를 호출하기 때문에, 브라우저가현재 실행 가능한 작업을 고려하지 않고 계속해서 함수를 호출하여버벅거리는 현상이 지속되며 CPU 및 배터리가 낭비될 수 있고,애니메이션 처리 시 일정한 간격으로 업데이트되므로, 화면이 부드럽게표시되지 않을 수 있습니다. requestAnimationFrame : 브라우저의 리프레시 주기에 맞추어 호출되기때문에, 브라우저가 최적의 타이밍에서 함수를 실행하도록 돕습니다.이로 인해 더 나은 성능 및 배터리 효율성을 제공할 수 있습니다.애니메이션 처리에 적합한 메소드로, 브라우저가 최적의 시기에애니메이션을 업데이트하므로 부드럽고 자연스러운 애니메이션 효과를얻을 수 있습니다. 일반적으로, 애니메이션 및 시간 기반 작업을 처리할 때는 requestAnimationFrame함수를 사용하는 것이 더 좋은 선택이라는 점을 알게됐고, 부드러운 애니메이션 및 효율적인 작업 처리를 위해 requestAnimationFrame함수를 사용하여 '부르미'를 구현했습니다."
    ],
    "result": [
      "시간 제약이 있는 상황에서 효율적인 개발 방법과 스케줄 관리의 중요성을 깨달았습니다. 또한, 임베디드 시스템과의 데이터 전달방식이나 제약사항에 대해 학습할 수 있었고, 무엇보다 디자인 적인 요소들에 대한 눈높이들이 한 층 높아지는 프로젝트였다고 생각합니다."
    ],
    "setting": ""
  },
  {
    "name": "T:LENS",
    "img": 2,
    "summary": "T:LENS는 키워드를 통해 실시간 트렌드를 쉽게 파악하고 싶은 사람과 기자별 맞춤형 구독 서비스가 필용한 사용자를 위한 실시간 크롤링 및 분산 처리를 통해 뉴스 트렌드를 종합하고 시각화하는 서비스입니다.",
    "background": [
      "뉴스는 현대 사회에서 매우 중요한 정보원으로 작용합니다. 사람들은 뉴스를 통해 최신 동향, 이슈, 경제 상황 등 다양한 정보를 얻고 소통하며 의사 결정을 내립니다. 하지만 너무 많은 뉴스가 생산되고 있어서 사용자들이 관심 있는 주제를 식별하고 핵심적인 내용을 파악하기 어려워지는 문제가 있습니다. 그래서 저희는 뉴스 트렌드 분석 서비스 프로젝트를 통해 이 문제를 해결하고자 했습니다. 사용자들이 최신 뉴스의 핵심적인 내용과 트렌드를 쉽게 파악할 수 있는 도구를 개발하여 제공함으로써, 사용자들의 시간과 노력을 절약하고 정확한 정보에 접근할 수 있도록 하고자 했습니다.",
      "데이터 시각화에 큰 관심을 가지고 있습니다. 프론트엔드 개발자로서 사용자 경험(UX)을 개선하기 위해 직관적이고 시각적으로 매력적인 인터페이스를 구현하는 것이 중요하다고 생각합니다. 따라서 이 프로젝트에서도 다양한 데이터 시각화 기법을 활용하여 사용자들이 쉽게 서비스를 이용할 수 있는 환경을 제공하고 싶었습니다."
    ],
    "fe": "Front-End : JavaScript, React, Redux, Swiper, Toastify, Slick-carousel, Sass, Amcharts, D3, React-Worldcloud, ApexCharts, Recharts",
    "be": "Back-End : Spring boot, MySQL, JWT",
    "role": [
      "Front-End : 2명",
      "Back-End : 2명",
      "Crawling : 1명",
      "데이터 정제 : 1명"
    ],
    "function": [
      "메인화면",
      "지역별 기사 확인하기",
      "기업별 주가정보 및 기사 확인하기",
      "기자별 작성 기사 확인하기"
    ],
    "function2": [
      "사용자가 가장 처음 보는 화면이기때문에 최대한 많은 정보를 얻을 수 있으면서 디자인적으로 거부감이 없도록 고민하며 구현했습니다. MUI의 Tabs컴포넌트를 사용하여 키워드 마다 제공되는 정보가 다르게 구성했고, 키워드 별 뉴스 기사와 다양한 시각화 데이터를 확인할 수 있습니다.//// 복잡한 데이터를 사용자들이 직관적으로 이해할 수 있도록 시각화 라이브러리를 적극적으로 사용했습니다. 총 10개 이상의 시각화 라이브러리를 하나하나 비교 테스트해 보며 프로젝트에 가장 알맞은 라이브러리 4개(D3, Amcharts, Apexcharts, Worldcloud)를 선정했고, 메인화면에 Amcharts, Apexcharts, Worldcloud를 활용하여 데이터를 시각화 했습니다. //// 뉴스 카드는 사용자에게 깔끔한 뉴스 요약을 제공하고, 한 번에 너무 많은 정보가 표시되는 것을 방지하기위해 CSS의 text-overflow와 -webkit-line-clamp 속성을 활용하여 내용이 2줄을 초과하지 않도록 구현하였습니다. 또한, 대량의 뉴스 데이터를 한 번에 로딩하는 것은 시스템에 과부하를 줄 수 있기 때문에, '무한 스크롤' 기술을 도입하여 이 문제를 해결했습니다. 사용자가 스크롤을 바닥까지 내리면 추가로 20개의 뉴스 데이터를 로딩하는 방식으로, 효율적이면서도 부드러운 UI를 구현했습니다.",
      "사용자가 지역별 뉴스의 정보를 효율적으로 확인하기 위해 대한민국 지도를 SVG를 이용해서 시각적으로 표현하고, 사용자에게 지역을 선택할 수 있는 인터페이스를 제공했습니다. 각 지역은 고유한 ID를 가지고 있으며, 마우스 클릭 이벤트에 따라 선택된 지역의 정보를 쉽게 확인할 수 있습니다.//// 이 컴포넌트에서도 '무한 스크롤' 기능을 적용했고, 사용자가 더 많은 정보를 자연스럽게 얻을 수 있도록 구현했습니다.",
      "기업별 간단한 정보를 확인하고 원하는 기업을 클릭하여 디테일 페이지로 이동할 수 있는 기능을 구현했습니다. MUI의 Card 컴포넌트를 사용하여 재사용 가능한 컴포넌트를 만들고, map 함수를 활용하여 Card를 반복적으로 표현함으로써 일관성 있는 레이아웃을 구성했습니다. 사용자들이 다양한 기업들의 정보를 쉽게 탐색하고 선택할 수 있도록 구현했습니다.//// 디테일 페이지에서는 선택한 기업의 상세 정보와 주가 정보, 뉴스 기사, 년도별 뉴스 기사 건수, 키워드 등을 확인할 수 있습니다. 기업의 주가 그래프는 주식 API와 Amcharts를 접목시켜 최근 3개월과 1년간의 주가 변동 추이를 시각화하여, 해당 기업의 주가 동향을 한눈에 파악할 수 있습니다. 또한, 키워드와 년도 별 기사 건수는 Wordcloud와 ApexCharts를 활용하여 시각화했습니다. Wordcloud로 표현된 키워드들은 클릭 가능하며, 클릭 시 검색 페이지로 넘어가도록 구현되어 추가적인 탐색과 검색이 가능합니다. 마찬가지로 ApexCharts로 표시된 년도 별 기사 건수는 그래프 형태로 제공되어 해당 기업의 언론 활동 추이 파악에 도움을 줍니다.",
      "24개의 언론사 별 기자들의 데이터를 크롤링하여 수집하고, 언론사를 기준으로 기자를 나누어 Carousel 방식으로 표현했습니다. Carousel 방식을 선택한 이유는 사용자가 다양한 언론사의 기자들을 쉽게 탐색하고 선택할 수 있도록 하기 위해서입니다. Carousel 방식은 여러 개의 항목을 좌우로 슬라이드하여 보여주는 UI 패턴으로, 한 화면에서 많은 정보를 제공할 수 있어 사용자 경험을 향상시킬 수 있을것이라 판단했습니다.//// 디테일 페이지에서는 사용자가 기자를 구독할 수 있는 기능을 제공합니다. 사용자는 원하는 기자를 구독하여 내 구독 리스트에 추가할 수 있으며, 마이페이지에서 간단하게 클릭하여 해당 기자의 디테일 페이지로 이동할 수 있습니다. 구독 기능을 통해 사용자들은 관심 있는 기자들과 연결되어 빠르고 편리하게 해당 기사나 정보에 접근할 수 있을것입니다. 또한, 각 기자의 취재 분야와 작성한 기사를 시각화 라이브러리를 활용하여 한눈에 확인할 수 있습니다. 시각화된 데이터를 통해 해당 기자가 어떤 분야에 전문성을 가지고 있는지 파악할 수 있으며, 그에 따라 관심 있는 주제나 분야의 기사를 찾아볼 수 있습니다.//// 구독 현황은 나이별과 성별별로 나눠서 확인할 수 있도록 제공됩니다. 사용자는 자신과 유사한 나이대나 성별의 사람들이 주로 어떤 종류의 기사나 정보를 선호하는지 알아볼 수 있습니다. 이러한 데이터 분석 결과는 서비스 개선 및 맞춤형 추천 등 다양한 영역에서 활용될 수 있습니다."
    ],
    "title": [
      "# 시각화 라이브러리",
      "# 대량의 데이터",
      "# 반응형 그리드 시스템"
    ],
    "learned": [
      "추출된 데이터를 어떤 라이브러리를 사용하여 시각화해야되는지 많은고민을 했습니다. 프로젝트의 목적과 요구 사항에 맞게 적절한라이브러리를 선택하는 것이 가장 중요하다고 생각했고, 여러라이브러리를 비교하고 실험해보면서 프로젝트의 특성과 요구사항을 가장잘 반영하는 라이브러리를 선택하여 적용했습니다. 라이브러리마다지원하는 기능이 다르기때문에 디자인적 요소와 데이터 전달방식을체크하여 선정했습니다.",
      "프로젝트에서 대량의 데이터를 다루기 때문에 최초의 페이지 로딩시20개의 데이터를 불러오고 스크롤을 내릴 때마다 추가적으로 20개씩 로드하는 무한 스크롤 기능을 구현했습니다. 추가로 데이터가 로드되는 동안화면이 튀거나 사용자 입력이 먹통되지 않도록 스피너 라이브러리를사용하여 로딩 화면을 따로 구현했습니다.",
      "다양한 화면 크기와 디바이스에 대응하기 위해 반응형 그리드 시스템을적용하여 화면 크기가 변경될 때 컬럼의 너비나 행의 배치를 조정하여레이아웃을 최적화 하도록 구현했습니다."
    ],
    "result": [
      "추출된 데이터를 다양한 시각화 라이브러리인 d3, Amcharts, Wordcloud,Apexcharts 등을 활용하여 시각적으로 표현하는 데 중점을 두었습니다.이를 통해 사용자들에게 직관적이고 명확한 정보 제공을 목표로하였습니다. 또한, 이 프로젝트를 통해 스프링 부트로 구현된 서버와의소통 경험을 쌓을 수 있었습니다."
    ],
    "setting": ""
  },
  {
    "name": "My PC",
    "img": 3,
    "summary": "My PC는 사진 또는 키오스크를 통해 빠르고 간편하게 자신의 퍼스널 컬러를 진단할 수 있고, 진단을 통해 사용자의 제품 선택을 보조해주는 플랫폼입니다. ",
    "background": [
      "옷이나 화장품과 같은 제품을 선택할 때 자신의 퍼스널 컬러를 고려하는 것은 매우 중요합니다. 각각의 사람은 얼굴, 피부, 머리카락 등의 색상과 조합에 따라 어울리는 컬러가 다릅니다. 그러나 많은 사람들이 자신의 퍼스널 컬러를 정확하게 알지 못하거나 판단하기 어렵다는 문제가 있습니다. 따라서 저희는 사용자들이 빠르고 간편하게 자신의 퍼스널 컬러를 진단할 수 있는 방법을 제공하는 플랫폼을 개발하기로 결정했습니다. 이를 통해 사용자들은 사진 또는 키오스크를 활용하여 자신의 퍼스널 컬러를 진단할 수 있으며, 해당 결과에 기반하여 옷이나 화장품 등 다양한 제품을 선택하는 데 도움을 받을 수 있습니다.",
      "사용자 경험(UX) 개선과 시각적인 요소에 대한 관심도 가지고 있습니다. 프론트엔드 개발자로서 인터랙션과 디자인 요소에 신경쓰는 것이 중요하다고 생각합니다. 이 프로젝트에서도 사용자들이 직관적으로 서비스를 이용할 수 있는 인터페이스와 시각화 기능을 구현하기 위해 노력하였습니다."
    ],
    "fe": "Front-End : JavaScript, React, Redux, Sass, MUI, styled-components, file-loader, formik ,Yup",
    "be": "Back-End : Node.js, Express, MySQL, python-shell, multer, moment",
    "role": ["Full-Stack : 2명", "머신러닝: 1명", "임베디드 : 2명"],
    "function": [
      "게시판",
      "퍼스널 컬러 진단하기",
      "퍼스널 컬러 진단하기 Server(Node.js)",
      "화장해보기",
      "내 프로필"
    ],
    "function2": [
      "게시판은 재사용 가능한 Card 컴포넌트를 만들어 일관성 있게 구현했습니다. 이를 통해 사용자는 게시글을 보기 쉽고 직관적으로 확인할 수 있습니다. Card 컴포넌트는 반복적으로 사용되며, 게시글의 이미지와 제목을 표시하여 일관된 레이아웃을 유지했습니다.//// 오른쪽 하단에 위치한 SeasonSelector 버튼을 활용하여 계절별 게시판을 선택할 수 있고, 원하는 계절에 해당하는 게시글을 쉽게 찾아볼 수 있습니다. 각 계절별로 어울리는 색상과 그렇지 않은 색상이 각각 10개씩 준비되어 있으며, 4개의 게시판마다 서로 다른 색상을 제공하여 시각적인 다양성을 더했습니다. ",
      "사용자는 자신의 이미지를 통해 퍼스널 컬러를 진단할 수 있습니다. 이미지가 등록되었을때만 진단하기 버튼이 활성화되도록 구현하여 사용자가 서버에 무의미한 요청을 보내는 것을 방지하여 서버 리소스를 효율적으로 관리할 수 있도록 하였습니다. 또한, 진단하기 버튼을 클릭했을 때 로딩 이미지를 넣어 사용자가 진단 도중 다른 페이지로 넘어가지 않도록 구성했습니다.",
      "클라이언트에서 사용자가 선택한 이미지를 formData에 담아서 서버로 전송하고, 서버에서 머신러닝 모델인 파이썬 파일로 이미지 파일을 보냅니다. 이미지 전처리, 크기 조절, 색상 표준화 등의 작업을 통해 결과를 반환하고 결과를 다시 클라이언트에 보내며 사용자는 자신의 퍼스널 컬러를 확인할 수 있습니다.",
      "두 단계의 이미지 등록을 통해 화장 시뮬레이션 기능을 제공합니다. 첫 번째 단계에서는 사용자가 화장 전의 사진을, 두 번째 단계에서는 화장된 이미지를 등록합니다. 이 때, 두 번째 이미지에 대해서는 24개의 준비된 이미지 중 선택할 수 있어 사용자가 별도로 이미지를 준비할 필요가 없습니다.//// 화장 시뮬레이션이 완료되면 결과에 대한 만족도 조사를 진행하고, 만족하는 경우에는 결과 이미지와 유사한 다른 5개의 이미지를 추천해줍니다. 반대로 만족하지 않은 경우에는 결과와 상반된 특징을 가진 다른 5개의 이미지를 추천해줍니다. 이러한 기능은 사용자 경험을 향상시키고 사용자가 서비스에 만족할 수 있도록 추가했습니다. 또한, 이 페이지도 퍼스널 컬러 진단하기와 마찬가지로 로딩 이미지를 넣어 화장 도중 다른 페이지로 넘어가지 않도록 구성했고, 비슷한 이미지 전달 과정을 통해 결과를 확인할 수 있습니다.",
      "내 프로필은 사용자가 간단하게 자신의 스토리를 업로드할 수 있도록 구성했습니다. 자신의 프로필 이미지와 퍼스널 컬러가 공유되고, 간단한 자기소개 글을 작성할 수 있습니다. 또한, 자신이 작성한 글을 한눈에 모아볼 수 있습니다."
    ],
    "title": ["# 상태관리(Redux)", "# Multer", "# 머신러닝 모델과 연계"],
    "learned": [
      "로그인 정보를 Redux로 관리하면, 애플리케이션 전역에서 로그인 상태를효과적으로 관리할 수 있다는 점을 알게되었습니다. 사용자가 로그인하면Redux 스토어에 로그인 상태를 저장하고, 다양한 컴포넌트에서 이 정보를공유할 수 있습니다. 이로써 상태 관리의 일관성을 유지하고 중복 코드를피할 수 있었습니다. Redux를 통해 애플리케이션의 상태를 한 곳에서 관리하면서 전역 상태의예측 가능성을 높일 수 있다는점과 Redux 미들웨어를 통해 비동기 작업을관리하면 코드가 보다 체계적이고 확장 가능하다는 것도 배울 수있었습니다.",
      "프로젝트에서 사용자가 이미지를 업로드하는 상황이 많았습니다.사용자가 퍼스널컬러 진단 및 화장하기와 같은 상황에서 자신의 이미지나샘플 이미지를 서버로 업로드하여 결과를 확인하는 과정이 필요했습니다.Node.js 환경에서 이러한 파일 업로드를 간편하게 다루기 위해 Multer를선택하고 구현했습니다.",
      "Python 파일의 머신러닝 모델과 Node.js 서버 간의 효율적인 통신과데이터 전달 방식을 이해하는 것이었습니다. 특히 사용자가클라이언트를 통해 이미지를 업로드하고 결과를 받아오는 과정에서데이터 형식 변환 및 머신러닝 모델에 데이터를 전달하는 것이어려움이었습니다. 이를 극복하기 위해 먼저 통신 메커니즘을 철저히 이해하고,클라이언트와 서버 간의 데이터 전달 방식을 통일화하여 일관성을유지했습니다. 이로써 데이터 호환성 문제를 극복하고 데이터를효율적으로 처리할 수 있었습니다."
    ],
    "result": [
      "Redux를 활용해 로그인 정보를 관리하는 것으로, 로그인 상태를애플리케이션 전반에서 간편하게 공유하고 관리할 수 있다는 것을 알게되었습니다.",
      "Multer를 사용하여 파일 업로드를 간단하게 다루면서, 사용자 이미지업로드와 같이 중요한 기능을 원활하게 구현하는 방법을 습득하였습니다.",
      "Python 머신러닝 모델과 Node.js 서버 간의 효율적인 데이터 통신과 전달방식을 배우고 실제로 구현하면서, 클라이언트의 이미지 업로드와머신러닝 결과 반환 과정을 원활하게 처리할 수 있는 능력을 기르는과정이 매우 유익하였습니다."
    ],
    "setting": ""
  },
  {
    "name": "YB MOVIE",
    "img": 4,
    "summary": "YB MOVIE는 데이터 기반 영화 추천 서비스 입니다. 사용자는 영화에 대한코멘트를 남길 수 있으며, 영화 이상형월드컵을 이용해 사용자가선호하는 장르를 파악하여 영화를 추천해주는 서비스입니다.",
    "background": [
      "영화는 많은 사람들에게 큰 관심과 즐거움을 줍니다. 그러나 너무 많은 영화가 있어서 사용자들이 어떤 영화를 선택해야 할지 결정하기 어렵다는 문제가 있습니다. 이러한 문제를 해결하고자 저희 팀은 데이터 기반의 영화 추천 서비스를 개발하기로 결정했습니다.",
      "사용자들의 선호도와 취향을 파악하여 최적의 영화를 추천하는 것은 사용자 경험(UX) 개선에 큰 도움이 됩니다. 저희 팀은 이러한 선호도 파악을 위해 영화에 대한 코멘트 시스템과 장르별 이상형 월드컵을 도입하여 사용자들이 좋아하는 장르와 관련된 영화를 추천하는 기능을 개발하였습니다. 이를 통해 사용자들이 보다 만족할 수 있는 영화 추천 서비스를 제공하고자 했습니다."
    ],
    "fe": "Front-End : JavaScript, Vue.js, Vuex, Vuetify, Bootstrap",
    "be": "Back-End : Django",
    "role": ["Front-End : 1명", "Back-End : 1명"],
    "function": [
      "영화 상세정보",
      "영화 월드컵",
      "월드컵 결과 기반 영화 추천",
      "평가",
      "검색 및 북마크"
    ],
    "function2": [
      "영화의 상세정보를 확인할 수 있는 모달 형식의 컴포넌트를 구현하였습니다. 이는 사용자가 현재 페이지에서 벗어나지 않고 필요한 정보를 확인할 수 있도록 하기 위함입니다. 이렇게 함으로써 사용자 경험을 향상시키고, 원활한 정보 접근성을 제공합니다. 줄거리 및 평가는 '보기' 버튼을 통해 활성화되며, 이를 통해 사용자는 원하는 정보만 선택적으로 볼 수 있습니다. 이 방식은 한 번에 많은 양의 텍스트를 보여주는 것이 아니라, 필요한 정보만 직접 선택하여 볼 수 있도록 하기 위해 이 방식을 선택했습니다. Vuetify의 Panels 컴포넌트를 활용하여 이 기능을 구현하였습니다.//// Youtube API를 활용하여 영화 제목과 'trailer' 단어를 조합하여 썸네일 이미지를 받아와 레이아웃을 구성하였습니다. 이 방식은 관련된 비주얼 요소로서 영화에 대한 사전 정보 제공과 동시에 사용자의 호감도와 참여율을 높이기 위함입니다. 또한, 영상 시청 기능은 모달창 안의 다른 모달창으로 구현하였습니다. 이 역시 사용자가 주요 컨텐츠에서 벗어나지 않도록 하기 위함이고, iframe을 활용하여 실제 영상 시청 기능을 구현하였으며, 사용자가 직접적인 경험을 할 수 있도록 만들었습니다.",
      "TMDB의 recommend API를 활용해 추천 영화를 response 받는 알고리즘 기능을 추가했습니다. 영화 월드컵은 16강으로 진행되며 매 라운드마다 영화가 랜덤하게 셔플되고, 최종 결승전에 진출한 두 영화를 활용하여 추천영화를 추출합니다. 프로젝트 수행 당시 '월드컵' 형태의 선호도 투표가 유행이었기 때문에, 이 방식을 선택하였습니다. 이러한 유행성 요소를 활용함으로써 서비스는 사용자들에게 친근감과 재미를 제공하며, 동시에 실제 사용자 취향 데이터를 얻어내는데 효과적일 것이라 생각했습니다.",
      "영화 월드컵을 마치면 추천 영화 컴포넌트가 새롭게 나타납니다. 추천 영화는 월드컵 결과를 기반으로 출력하며 영화 선택시 TMDB의 영화 정보 페이지로 넘어가는 아웃링크 방식으로 구성했습니다. 또한 사용자는 언제든지 영화 월드컵을 진행하여 추천 영화 리스트를 바꿀 수 있습니다.",
      "영화별로 마우스 호버시 별모양의 평가 역영이 생깁니다. 별모양 클릭 시 영화를 평가할 수 있는 모달창에 새롭게 나옵니다. 사용자는 간편하게 영화를 평가할 수 있고, 평가한 내용은 영화 상세정보에서 확인할 수 있습니다.",
      "영화 검색기능은 원하는 정보를 빠르게 얻을 수 있도록 Vuex의 상태관리 기능을 활용하여 실시간으로 처리하도록 구현했습니다. 또한, 사용자가 특정 영화를 나중에 다시 찾아볼 수 있도록 하거나, 자신만의 영화 컬렉션을 만들 수 있도록 지원하기 위해 북마크 기능을 추가하여 사용자가 등록한 영화 리스트만 따로 확인할 수 있도록 구현했습니다."
    ],
    "title": ["# 추천 알고리즘", "# Youtube API", "# Modal"],
    "learned": [
      "영화추천알고리즘은 영화 월드컵을 진행하여 결승전에 진출한 영화 2개를활용하여 Tmdb에서 추천 영화를 넘겨받는 Recommend API를 활용했습니다.",
      "YouTube API와 Axios 라이브러리를 처음 사용해 API 요청과 응답 처리를연결하는 방법이 어려웠습니다. 또한, 영화 제목과 트레일러 라는검색어를 조합하여 정확한 검색을 보내는 로직을 개발하고, API 요청상태에 따른 사용자 경험을 관리하는 비동기 처리와 UI 업데이트도고려해야 했습니다. API 키 관리와 보안 역시 중요한 고려사항이었는데,이러한 어려움을 극복하기 위해 문서와 커뮤니티의 지식을 활용하여점진적으로 기능을 완성시켰습니다.",
      "사용자들이 조금이라도 더 편리하게 사용하기위한 방법을 찾던 중 모달컴포넌트를 알게되었습니다. 사용자의 시선을 집중시키고 중요페이지를 유지하며 영화의 정보를 빠르게 파악할수있고, 일관된디자인을 제공할수 있기 때문에 모달을 적극으로 활용하여 사용자들이영화의 정보를 쉽고 빠르게 파악할 수 있도록 구현했습니다."
    ],
    "result": [
      "처음 수행한 프로젝트였지만, 초기에는 어떻게 시작해야 할지 막막함을느꼈습니다. 하지만 단계적으로 기능을 구현하며 자신감을 얻게되었습니다. 추천 알고리즘, API 처리와 보안, 비동기 처리, 모달컴포넌트 활용, 사용자 편의성 고려 등 다양한 과제를 공식 문서와커뮤니티 지식을 활용하여 해결해나감으로써 점차 프로젝트가 완성되는과정을 경험하게 되었습니다."
    ],
    "setting": ""
  },
  {
    "name": "Portfolio",
    "img": 5,
    "summary": "취업을 목적으로 한 개인 포트폴리오 사이트입니다. JavaScript와 React를 이용해 제작했으며 Swiper 라이브러리를 적극 활용하여 클라이언트를 구성했고, Firebase의 Hosting을 이용해 배포했습니다.",
    "background": [
      "취업을 목표로 하고 있었기 때문에, 취업 준비 과정에서 포트폴리오의 필요성을 느꼈습니다. 실제 업무에서 사용하는 기술 스택과 동일한 환경에서 프로젝트를 진행함으로써, 제 기술력을 입증하고자 했습니다.",
      "React와 Javascript, 그리고 다양한 라이브러리와 도구들(Swiper, Sass, styled-components)에 대해 보다 깊이 이해하고 싶었습니다. 이 기술들은 현재 웹 개발 분야에서 널리 사용되고 있으며, 제가 원하는 분야의 일자리에 필수적인 요소입니다.",
      "사용자 경험(UX)에 중점을 두어 프로젝트를 수행하고 싶었습니다. Swiper라는 도구를 활용하여 웹사이트 내의 움직임과 인터랙션을 자연스럽게 만들어 사용자 친화적인 인터페이스를 구현하였습니다.",
      "firebase의 hosting 서비스를 활용하여 프로젝트 배포 과정도 경험해보았습니다. 이는 실제 서비스 배포 과정을 체계적으로 이해하고 경험하기 위함이었습니다."
    ],
    "fe": "Front-End : JavaScript, React, Toastify, Swiper, Sass, styled-components",
    "de": "Deploy : Firebase",
    "role": ["Front-End & Deploy : 1명"],
    "function": ["Flow", "About", "Skills", "Projects", "contact"],
    "function2": [
      "Swiper를 적극적으로 활용하여 사용자 경험을 향상시키는데 노력했습니다. 사용자는 마우스 휠로 주요 컨텐츠를 파악할 수 있고, 클릭을 통해 상세 정보를 확인할 수 있습니다.//// 전체적으로 레이아웃 구성을 깔끔하게 가져가기 위해 노력했습니다. 영역의 넓이나, 마진, 패팅 등 재사용 가능한 컴포넌트를 활용하여 일관되게 구현했습니다. 또한, 버튼이나 클릭 요소들에 transtion 효과를 줘서 사용자가 이벤트 효과를 자연스럽게 느낄 수 있도록 구현했습니다.",
      "다른 사람들의 다양한 포트폴리오 About me 부분을 확인해 보고, 가장 표준적인 방법으로 About me 를 구성했습니다. 간단한 소개글과, 저에 대한 정보를 확인할 수 있습니다.",
      "사용해본 Skill들을 모두 나열했습니다. 마우스 호버시 프로젝트 수행 횟수에 대해 알 수 있습니다.",
      "Swiper를 활용해서 프로젝트 컴포넌트를 구성했습니다. 메인 컨텐츠는 재사용 가능한 컴포넌트를 만들어서 사용했고, 그 안의 작은 요소들도 역시, 재사용 가능한 컴포넌트를 만들어서 구현했습니다.",
      "Contact는 emailjs를 활용해서 메일 보내기 기능을 만들었고, 비교 연산자를 통해 작성해야되는 칸이 비어있지 않은지 유효성 검사를 진행하고 통과 됐을때, 이메일을 전송합니다."
    ],
    "title": ["# Design", "# Deploy"],
    "learned": [
      "혼자서 프로젝트를 진행하다 보니 디자인적 요소를 선택할 때 다른사람의평가와 피드백을 받을 수 없어서, 포트폴리오를 검토하는 사람의시각에서 최대한 깔끔하고 쉽게 내용을 이해할 수 있도록 레이아웃을구성했습니다. 각 컴포넌트의 레이아웃을 구성할 때는 온라인커뮤니티에서 얻은 아이디어를 활용하여 나만의 최적화된 디자인을구현할 수 있었습니다. 초기 디자인 아이디어가 실제로 구현되면서 예상치 못한 문제나 개선사항이 생겼습니다. 이러한 문제점이 생길때마다 여러가지 방식으로실험하고 수정하며 완성도 높은 레이아웃을 구현할 수 있었습니다.",
      "처음에는 FE와 BE 모두 구성하여 AWS서버를 구매해 배포할 생각을가지고 있었지만, 프로젝트의 볼륨이 생각보다 크지 않고, 빠르고손쉽게 배포할 수 있는 방법을 알게되어 프로젝트의 볼륨에 맞춰Firebase의 호스팅 서비스를 사용하여 정적 웹사이트를 배포했습니다."
    ],
    "result": [
      "디자인에 대해 많은 공부를 할 수 있었습니다. 혼자서 진행하다 보니자유롭게 원하는 대로 구현할 수 있는 장점도 있었지만, 디자인 요소를추가할 때마다 상당한 시간이 소요되었습니다. 구글링을 통해 다양한아이디어와 기술을 습득하며, 디자인에 대한 시야도 확장할 수 있었다고생각합니다."
    ],
    "setting": ""
  }
]
